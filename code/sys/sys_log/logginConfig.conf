#########################
##      Definitions    ##
#############################################################################################################################################
#                                                                                                                                           #
#   Loggers - Read and catch the logs on the code. The Root logger has to be refined to work, after that, you can create your own logger.   #
#                                                                                                                                           #
#   Handlers - Get the logs caught on logger but only the ones with level equal or higher that the defined on its declaration.              #
#                                                                                                                                           #
#   Formatters - Define the structure of the log to be shown or stored.                                                                     #
#                                                                                                                                           #
#############################################################################################################################################

[loggers]
keys = root

[handlers]
keys = consoleHandler, rotatingFileHandler

[formatters]
keys = myFormatter

#########################
##       Loggers       ##
#########################

[logger_root]
#Minimun level of log to be caught by the logger
level = DEBUG
#Handlers that are allowed to access to the logs stored in this logger
handlers = consoleHandler, rotatingFileHandler
#Logger name
qualname = root
#Property that defines if the logger can rise the logs to a parent logger. (False if you dont want it)
propagate = False


#########################
##       Handlers      ##
#########################

[handler_consoleHandler]
#Defines the type of handler (StreamHandler -> Shows logs on the console screen; handlers.RotatingFileHandler -> Saves the logs in a file system that rotates the main file when it's full and come back to it, when the other files are full too, to overwrite it)
class = logging.StreamHandler
#Minimun level of log to be gotten by the handler
level = DEBUG
#Formatter used by this handler
formatter = myFormatter
#Arguments needed by type of handler
args = (sys.stdout,)

[handler_rotatingFileHandler]
class = logging.handlers.RotatingFileHandler
level = DEBUG
formatter = myFormatter
#(String with the starting file path, File opening mode(not working ?), max (bytes) size per file, nÂº of stored files (max rotating file system number of files - 1))
args=('./log/logging_rotatingfile_example.log', 'w', 1000, 4)

#########################
##      Formatters     ##
#########################

[formatter_myFormatter]
class = DRV.DRV_LOG.DRV_LOG_Logger.DRV_LOG_Custom_Formatter_c
format = [%(asctime)s] %(levelname)-8s %(module)-15s - [%(funcName)s:%(lineno)d] -> %(message)s
datefmt = %d/%m/%Y %I:%M:%S %p
encoding = UTF-8
style = %
